#+TITLE:Expresso basics 
#+AUTHOR: Maik SchÃ¼nemann
#+email: maikschuenemann@gmail.com
#+STARTUP:showall
-----

#+begin_src clojure :exports both :results output :tangle yes
  (ns expresso-tutorial.expresso-basics
    (:use [numeric.expresso.core]))
#+end_src

* Getting Started
  Expresso is a library for symbolic manipulation of expressions. It could be seen
  as the symbolic manipulation part of a clojure computer algebra system with 
  core.matrix as its execution engine. Therefore it adopts the core.matrix 
  symbols and its sane semantics for its own expressions.

* Expressions
  Central datastructure of expresso is an Expression.
  Clojure, being a lisp, already has a proven and simple way to encode
  expressions, namely s-expressions.
  Expresso follows the lisp approach and encodes expressions as s-expressions.
  Therefore, expressions can be manipulated using the standart clojure sequence
  functions.

** Constructing Expressions
   You can construct expressions with the ex macro like shown in the next snippet

  #+begin_src clojure :exports both :results output :tangle yes
    (in-ns 'expresso-tutorial.expresso-basics)
    ;;you can think of ex as a better form of quoting to construct s-expressions
    (def expr (ex (+ (* a x) (* b x) (- x))))
    
    (first expr) ;=> +
    (rest expr)  ;=> ((* a x) (* b x) (- x))
    
    ;;unquoting is also supported
    (ex (+ (* a x) ~(+ 3 (* 4 5)))) ;=> (+ (* a x) 23)
        
  #+end_src
   This is all to get you started using expresso!
*** Parsing expressions
    In case you find constructing expressions in infix style easier than 
    with prefix style, you can parse an expression from an infix string.
    It works just like you would expect
    #+begin_src clojure :exports both :results output :tangle yes
      (in-ns 'exprpresso-tutorial.expresso-basics)

      (parse-expression "1 + 2") ;=> (+ 1 2)

      (parse-expression "x + y + z") ;=> (+ x y z)

      (parse-expression "1+2*3**4+5") ;=> (+ 1 (* 2 (** 3 4)) 5)

      (parse-expression "1+2*3**(4+5)") ;=> (+ 1 (* 2 (** 3 (+ 4 5))))

      (parse-expression "sin(x)**2 + cos( x ) ** 2 = 1")
      ;;=> (= (+ (** (sin x) 2) (** (cos x) 2)) 1)

      (parse-expression "[1 2 3] + [4 5 6]")
    #+end_src
** Other Mechanism To Construct Expressions
   Expresso does not force you to construct expressions with the ex macro. It 
   provides more constructing mechanism and the public api also accepts plain
   s-expressions. Check the [Advanced Expression Construction and Manipulation](https://github.com/mschuene/expresso-tutorial/blob/master/advanced-expression-construction.org)
   section for more details.
* Basic Expression Manipulations
  Two basic manipulations for expressions are to evaluate them and to substitute
  terms in the expression for other.
  Evaluate takes the expression and a map of symbols to values and returns the
  numerical result of the evaluation.
  Substitute also takes the expression and a map and 
  replaces the parts of the of the expression specified in the map with the
  corresponding values
  #+begin_src clojure :exports both :results output :tangle yes
    (in-ns 'expresso-tutorial.expresso-basics)

    (evaluate (ex (+ 1 x)) {'x 2}) ;=> 3

    (evaluate (ex (* x y)) {'x [1 2 3] 'y 4}) ;=> [4 8 12]

    (evaluate (zero-matrix :shape [2 3]) {}) ;=> [[0.0 0.0 0.0] [0.0 0.0 0.0]]

    (substitute (ex (+ y 2)) {'y 4}) ;=> (+ 4 2)

    ;;you can also substitute whole parts of the expression
    (substitute (ex (* (+ x y) 2)) {(ex (+ x y)) 4}) ;=> (* 4 2)
    
  #+end_src
  
  This is the basic interface expresso gives you to work with expressions.
  This should be enough to get you started to go through the next sections 
  of this tutorial. For more details about how to construct, annotate and 
  query expressions and symbols see the [Advanced Expression Construction and Manipulation](https://github.com/mschuene/expresso-tutorial/blob/master/advanced-expression-construction.org)
  section.
